{"version":3,"file":"66.49cec2e1908445e765a1.js","mappings":"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","sources":["webpack://package.json/./src/components/tender/tender.component.jsx","webpack://package.json/./src/components/tender/tender.style.scss?9070"],"sourcesContent":["import React from 'react';\n\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { MyAutocomplite } from '../../stores/elements';\n\nconst queryString = require('query-string');\n\n\nconst dynamicCellStyle = params => {\n  if( params.colDef.headerName == 'Цена' ){\n    return { borderRight: '1px solid #bababa' };\n  }\n  return null;\n};\n\nclass Tender_ extends React.Component {\n  constructor(props) {\n    super(props);\n        \n    this.state = {\n      module: 'tender',\n      module_name: '',\n      is_load: false,\n      \n      modalDialog: false,\n      \n      testTable: [],\n      vendors: [],\n      myVendors: [],\n      showVendors: [],\n      \n      params_api: null,\n      params_columnApi: null\n    };\n  }\n  \n  async componentDidMount(){\n    let data = await this.getData('get_all');\n    \n    /*let table = [];\n    \n    data.items.map( (main_cat, k1) => {\n      \n      table.push({\n        section: 'big-title',\n        item: main_cat.name\n      })\n      \n      main_cat.cats.map( (cat, k2) => {\n        table.push({\n          section: 'big-title',\n          item: cat.name\n        })\n        \n        cat.items.map( (item, k3) => {\n          let tableItem = {};\n          \n          data['vendors'].map( (it, k4) => {\n            \n            let item_price = data.vendor_price.find( (item_price) => parseInt(item_price.vendor_id) == parseInt(it['id']) && parseInt(item_price.item_id) == parseInt(item['id']) );\n            \n            \n            if( item_price ){\n              tableItem[ 'vend_price_'+it['id'] ] = item_price['price'];  \n              tableItem[ 'vend_city_'+it['id'] ] = 'тлт';\n            }else{\n              tableItem[ 'vend_price_'+it['id'] ] = '';  \n              tableItem[ 'vend_city_'+it['id'] ] = '';\n            }\n            \n          } )\n          tableItem.item = item.name;\n          tableItem.section = 'last';\n          \n          let item_ras = data.ras.find( (item_ras) => parseInt(item_ras.item_id) == parseInt(item['id']) );\n          \n          if( item_ras ){\n            tableItem.ras = item_ras.count_pf;\n          }else{\n            tableItem.ras = '';\n          }\n          \n          table.push(tableItem)\n        } )\n      } )\n    } )*/\n    \n    this.setState({\n      module_name: data.module_info.name,\n      //testTable: table,\n      //vendors: data['vendors'],\n      //showVendors: data['vendors']\n    })\n    \n    document.title = data.module_info.name;\n  }\n  \n  getData = (method, data = {}) => {\n    \n    this.setState({\n      is_load: true\n    })\n    \n    return fetch('https://jacochef.ru/api/index_new.php', {\n      method: 'POST',\n      headers: {\n        'Content-Type':'application/x-www-form-urlencoded'},\n      body: queryString.stringify({\n        method: method, \n        module: this.state.module,\n        version: 2,\n        login: localStorage.getItem('token'),\n        data: JSON.stringify( data )\n      })\n    }).then(res => res.json()).then(json => {\n      \n      if( json.st === false && json.type == 'redir' ){\n        window.location.pathname = '/';\n        return;\n      }\n      \n      if( json.st === false && json.type == 'auth' ){\n        window.location.pathname = '/auth';\n        return;\n      }\n      \n      setTimeout( () => {\n        this.setState({\n          is_load: false\n        })\n      }, 300 )\n      \n      return json;\n    })\n    .catch(err => { \n      console.log( err )\n      this.setState({\n        is_load: false\n      })\n    });\n  }\n  \n  onCellClicked(event){\n    console.log( event.data );\n    console.log( event.colDef.field );\n  }\n  \n  onGridReady(params){\n    this.setState({\n      params_api: params.api,\n      params_columnApi: params.columnApi\n    });\n  }\n  \n  async show(){\n    let data = {\n      vendors: this.state.myVendors\n    };\n    \n    let res = await this.getData('get_data', data);\n    \n    let table = [];\n    \n    res.items.map( (main_cat, k1) => {\n      \n      table.push({\n        section: 'big-title',\n        item: main_cat.name\n      })\n      \n      main_cat.cats.map( (cat, k2) => {\n        table.push({\n          section: 'big-title',\n          item: cat.name\n        })\n        \n        cat.items.map( (item, k3) => {\n          let tableItem = {};\n          \n          res['vendors'].map( (it, k4) => {\n            \n            let item_price = res.vendor_price.find( (item_price) => parseInt(item_price.vendor_id) == parseInt(it['id']) && parseInt(item_price.item_id) == parseInt(item['id']) )\n            \n            if( item_price ){\n              tableItem[ 'vend_price_'+it['id'] ] = item_price['price'];  \n              tableItem[ 'vend_city_'+it['id'] ] = 'тлт';\n            }else{\n              tableItem[ 'vend_price_'+it['id'] ] = '';  \n              tableItem[ 'vend_city_'+it['id'] ] = '';\n            }\n            \n          } )\n          tableItem.item = item.name;\n          tableItem.section = 'last';\n          \n          let item_ras = res.ras.find( (item_ras) => parseInt(item_ras.item_id) == parseInt(item['id']) );\n          \n          if( item_ras ){\n            tableItem.ras = item_ras.count_pf;\n          }else{\n            tableItem.ras = '';\n          }\n          \n          table.push(tableItem)\n        } )\n      } )\n    } )\n    \n    \n    \n    \n    \n    \n    this.setState({\n      testTable: table,\n      showVendors: res['vendors']\n    })\n  }\n  \n  render(){\n\n    return (\n      <Backdrop open={true}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    )\n\n    return (\n      <>\n        <Backdrop open={this.state.is_load}>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n        \n        <Dialog\n          open={this.state.modalDialog}\n          onClose={ () => { this.setState({ modalDialog: false }) } }\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Новая категория</DialogTitle>\n          <DialogContent>\n            \n            \n            \n          </DialogContent>\n          <DialogActions>\n            <Button  color=\"primary\">Сохранить</Button>\n          </DialogActions>\n        </Dialog>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={12}>\n            <h1>{this.state.module_name}</h1>\n          </Grid>\n          \n          <Grid item xs={12} sm={12}>\n            <MyAutocomplite data={this.state.vendors} multiple={true} value={this.state.myVendors} func={ (event, val) => { this.setState({ myVendors: val }) } } label='Поставщики' />\n          </Grid>\n          <Grid item xs={12} sm={3}>\n            <Button variant=\"contained\" onClick={this.show.bind(this)}>Показать</Button>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <div className=\"ag-theme-alpine\" style={{height: 600, width: '100%'}}>\n              <AgGridReact\n                  onGridReady={this.onGridReady.bind(this)}\n                  onCellClicked={this.onCellClicked}\n                  rowData={ this.state.testTable }\n                  \n                  >\n                  <AgGridColumn field=\"ras\" width={120} pinned=\"left\"></AgGridColumn>\n                  <AgGridColumn field=\"item\" width={300} pinned=\"left\" cellClassRules={{'cell-span': \"data.section==='big-title'\"}}></AgGridColumn>\n                  <AgGridColumn hide={true}></AgGridColumn>\n                    \n                  { this.state.showVendors.map( (item, key) => \n                    <AgGridColumn key={key} headerName={item.name} resizable={true} width={180}>\n                      <AgGridColumn field={'vend_city_'+item.id} headerName={'Город'} resizable={true} width={90}></AgGridColumn>\n                      <AgGridColumn field={'vend_price_'+item.id} headerName={'Цена'} resizable={true} width={90} cellStyle={dynamicCellStyle}></AgGridColumn>\n                    </AgGridColumn>\n                  ) }\n                  \n                  \n              </AgGridReact>\n            </div>\n          </Grid>\n          \n          <Grid item xs={12} sm={12}>\n          \n          </Grid>    \n        </Grid>\n      </>\n    )\n  }\n}\n\nexport function Tender() {\n  return (\n    <Tender_ />\n  );\n}","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1666587505351\n      var cssReload = require(\"../../../node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"names":["queryString","require","Tender_","props","method","data","setState","is_load","fetch","headers","body","stringify","module","state","version","login","localStorage","getItem","JSON","then","res","json","st","type","setTimeout","window","location","pathname","err","console","log","module_name","modalDialog","testTable","vendors","myVendors","showVendors","params_api","params_columnApi","this","getData","module_info","name","document","title","event","colDef","field","params","api","columnApi","table","items","map","main_cat","k1","push","section","item","cats","cat","k2","k3","tableItem","it","k4","item_price","vendor_price","find","parseInt","vendor_id","item_id","item_ras","ras","count_pf","Backdrop","open","CircularProgress","color","React","Tender","cssReload","id","hot","dispose","accept","undefined"],"sourceRoot":""}