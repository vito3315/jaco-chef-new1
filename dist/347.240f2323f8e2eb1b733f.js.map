{"version":3,"file":"347.240f2323f8e2eb1b733f.js","mappings":"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","sources":["webpack://package.json/./src/components/live_orders/live_orders.component.jsx","webpack://package.json/./src/components/live_orders/live_orders.style.scss"],"sourcesContent":["import React from 'react';\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nimport { MySelect, MyCheckBox } from '../../stores/elements';\r\n\r\nconst queryString = require('query-string');\r\n\r\nclass LiveOrders_ extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n        \r\n    this.state = {\r\n      module: 'live_orders',\r\n      module_name: '',\r\n      is_load: false,\r\n      \r\n      points: [],\r\n      point: '0',\r\n      showReady: false,\r\n      read: [],\r\n      onstol: [],\r\n      ordersQueue: []\r\n    };\r\n  }\r\n  \r\n  async componentDidMount(){\r\n    \r\n    let data = await this.getData('get_all');\r\n    \r\n    this.setState({\r\n      points: data.point_list,\r\n      point: data.point_list[0].id,\r\n      module_name: data.module_info.name\r\n    })\r\n    \r\n    document.title = data.module_info.name;\r\n    \r\n    setTimeout( () => {\r\n      this.updateData();\r\n    }, 100 )\r\n  }\r\n  \r\n  getData = (method, data = {}) => {\r\n    \r\n    this.setState({\r\n      is_load: true\r\n    })\r\n    \r\n    return fetch('https://jacochef.ru/api/index_new.php', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type':'application/x-www-form-urlencoded'},\r\n      body: queryString.stringify({\r\n        method: method, \r\n        module: this.state.module,\r\n        version: 2,\r\n        login: localStorage.getItem('token'),\r\n        data: JSON.stringify( data )\r\n      })\r\n    }).then(res => res.json()).then(json => {\r\n      \r\n      if( json.st === false && json.type == 'redir' ){\r\n        window.location.pathname = '/auth';\r\n        return;\r\n      }\r\n      \r\n      if( json.st === false && json.type == 'auth' ){\r\n        window.location.pathname = '/auth';\r\n        return;\r\n      }\r\n      \r\n      setTimeout( () => {\r\n        this.setState({\r\n          is_load: false\r\n        })\r\n      }, 300 )\r\n      \r\n      return json;\r\n    })\r\n    .catch(err => { \r\n      console.log( err )\r\n    });\r\n  }\r\n   \r\n  changePoint(event){\r\n    let data = event.target.value;\r\n    \r\n    this.setState({\r\n      point: data\r\n    })\r\n    \r\n    setTimeout( () => {\r\n      this.updateData();\r\n    }, 50 )\r\n  }\r\n  \r\n  changeCheckOrders(event){\r\n    let data = event.target.checked;\r\n    \r\n    this.setState({\r\n      showReady: data\r\n    })\r\n  }\r\n  \r\n  async updateData(){\r\n    let data = {\r\n      point_id: this.state.point,\r\n      showReady: this.state.showReady === true ? 1 : 0\r\n    };\r\n    \r\n    let res = await this.getData('get_orders', data);\r\n    \r\n    this.setState({\r\n      read: res.read,\r\n      onstol: res.onstol,\r\n      ordersQueue: res.prestol_new\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <>\r\n        <Backdrop open={this.state.is_load} style={{ zIndex: 99 }}>\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={12}>\r\n            <h1>{this.state.module_name}</h1>\r\n          </Grid>\r\n          \r\n            \r\n          <Grid item xs={6} sm={6}>\r\n            <MySelect data={this.state.points} value={this.state.point} func={ this.changePoint.bind(this) } label='Точка' />\r\n          </Grid>\r\n          <Grid item xs={6} sm={6}>\r\n            <Button variant=\"contained\" onClick={this.updateData.bind(this)}>Обновить данные</Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12}>\r\n            <MyCheckBox value={this.state.showReady} func={ this.changeCheckOrders.bind(this) } label='Показывать готовые' />\r\n          </Grid>\r\n            \r\n          <Grid item xs={12} sm={12}>\r\n            \r\n            <TableContainer component={Paper}>\r\n              <Table aria-label=\"a dense table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>#</TableCell>\r\n                    <TableCell>Тип</TableCell>\r\n                    <TableCell>Время заказа</TableCell>\r\n                    <TableCell>Время предзакза</TableCell>\r\n                    \r\n                    <TableCell>Время выхода на стол</TableCell>\r\n                    <TableCell>Во сколько собрали</TableCell>\r\n                    <TableCell>Закрыли</TableCell>\r\n                    \r\n                    <TableCell>Приготовили</TableCell>\r\n                    <TableCell>Отдали</TableCell>\r\n                    <TableCell>Обещали</TableCell>\r\n                    \r\n                    <TableCell>Статус</TableCell>\r\n                    <TableCell>Стол</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  \r\n                  {this.state.read.map( (item, key) => (\r\n                    <TableRow key={key}>\r\n                      <TableCell>{item.id}</TableCell>\r\n                      <TableCell>{item.type_order}</TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 1 ? '' : item.date_time_order }</TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 1 ? item.date_time_preorder_ : '' }</TableCell>\r\n                      \r\n                      <TableCell>{item.unix_start_stol_or}</TableCell>\r\n                      <TableCell>{item.give_data_time_}</TableCell>\r\n                      <TableCell>{item.close_date_time_order}</TableCell>\r\n                      \r\n                      <TableCell style = {{backgroundColor: parseInt(item.type_) == 1 ? '' : item.color}}>{item.time_}</TableCell>\r\n                      <TableCell style = {{backgroundColor: parseInt(item.type_) != 1 ? '' : item.color}}>{item.test_time}</TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 0 ? item.unix_time_to_client : '' }</TableCell>\r\n                      \r\n                      <TableCell>{item.status}</TableCell>\r\n                      <TableCell>{item.stol_sborki}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                  \r\n                  {this.state.onstol.map( (item, key) => (\r\n                    <TableRow key={key} style = {{backgroundColor: 'yellow'}}>\r\n                      <TableCell>{item.id}</TableCell>\r\n                      <TableCell>{item.type_order}</TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 1 ? '' : item.date_time_order }</TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 1 ? item.date_time_preorder_ : '' }</TableCell>\r\n                      \r\n                      <TableCell>{item.unix_start_stol_or}</TableCell>\r\n                      <TableCell></TableCell>\r\n                      <TableCell></TableCell>\r\n                      \r\n                      <TableCell></TableCell>\r\n                      <TableCell></TableCell>\r\n                      <TableCell>{ parseInt(item.preorder) == 0 ? item.unix_time_to_client : '' }</TableCell>\r\n                      \r\n                      <TableCell>{item.status}</TableCell>\r\n                      <TableCell>{item.stol_sborki}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            \r\n            <TableContainer component={Paper}>\r\n              <Table aria-label=\"a dense table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>#</TableCell>\r\n                    <TableCell>Пред</TableCell>\r\n                    <TableCell>Время оформления</TableCell>\r\n                    <TableCell>Время выхода на стол</TableCell>\r\n                    <TableCell>Время закрытия</TableCell>\r\n                    <TableCell>Обещали</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  \r\n                  {this.state.ordersQueue.map( (item, key) => (\r\n                    <TableRow key={key}>\r\n                      <TableCell>{item.id}</TableCell>\r\n                      <TableCell>{ parseInt(item.is_preorder) == 1 ? item.date_time_preorder : '' }</TableCell>\r\n                      <TableCell>{ parseInt(item.is_preorder) == 0 ? item.date_time_order : '' }</TableCell>\r\n                      \r\n                      <TableCell>{item.time_start_order}</TableCell>\r\n                      <TableCell>{item.time_end_order}</TableCell>\r\n                      \r\n                      <TableCell>{ parseInt(item.is_preorder) == 0 ? item.unix_time_to_client : '' }</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                  \r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            \r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport function LiveOrders() {\r\n  return (\r\n    <LiveOrders_ />\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1668339426083\n      var cssReload = require(\"../../../node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"names":["queryString","require","LiveOrders_","props","method","data","setState","is_load","fetch","headers","body","stringify","module","state","version","login","localStorage","getItem","JSON","then","res","json","st","type","setTimeout","window","location","pathname","err","console","log","module_name","points","point","showReady","read","onstol","ordersQueue","this","getData","point_list","id","module_info","name","document","title","updateData","event","target","value","checked","point_id","prestol_new","Backdrop","open","style","zIndex","CircularProgress","color","Grid","container","spacing","item","xs","sm","func","changePoint","bind","label","Button","variant","onClick","changeCheckOrders","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","key","type_order","parseInt","preorder","date_time_order","date_time_preorder_","unix_start_stol_or","give_data_time_","close_date_time_order","backgroundColor","type_","time_","test_time","unix_time_to_client","status","stol_sborki","is_preorder","date_time_preorder","time_start_order","time_end_order","React","LiveOrders","cssReload","hot","dispose","accept","undefined"],"sourceRoot":""}